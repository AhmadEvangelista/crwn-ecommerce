{"ast":null,"code":"import { takeLatest, all, call, put } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { signInSuccess, signInFailure } from './user.actions';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(s);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* oncheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(oncheckUserSession)]);\n}","map":{"version":3,"sources":["C:/Users/MhadAPE/WebSiteProjects/JavaScript/React/e-commerce/crwn-clothing/src/redux/user/user.sagas.js"],"names":["takeLatest","all","call","put","UserActionTypes","signInSuccess","signInFailure","auth","googleProvider","createUserProfileDocument","getCurrentUser","getSnapshotFromUserAuth","userAuth","userRef","userSnapshot","get","id","data","error","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","signOut","s","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","oncheckUserSession","CHECK_USER_SESSION","onSignOutStart","SIGN_OUT_START","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest, all, call, put } from 'redux-saga/effects';\r\nimport UserActionTypes from './user.types';\r\nimport { signInSuccess, signInFailure } from './user.actions';\r\nimport {\r\n  auth,\r\n  googleProvider,\r\n  createUserProfileDocument,\r\n  getCurrentUser,\r\n} from '../../firebase/firebase.utils';\r\n\r\nexport function* getSnapshotFromUserAuth(userAuth) {\r\n  try {\r\n    const userRef = yield call(createUserProfileDocument, userAuth);\r\n    const userSnapshot = yield userRef.get();\r\n    yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\r\n  } catch (error) {\r\n    yield put(signInFailure(error));\r\n  }\r\n}\r\nexport function* signInWithGoogle() {\r\n  try {\r\n    const { user } = yield auth.signInWithPopup(googleProvider);\r\n    yield getSnapshotFromUserAuth(user);\r\n  } catch (error) {\r\n    yield put(signInFailure(error));\r\n  }\r\n}\r\nexport function* signInWithEmail({ payload: { email, password } }) {\r\n  try {\r\n    const { user } = yield auth.signInWithEmailAndPassword(email, password);\r\n    yield getSnapshotFromUserAuth(user);\r\n  } catch (error) {\r\n    yield put(signInFailure(error));\r\n  }\r\n}\r\nexport function* isUserAuthenticated() {\r\n  try {\r\n    const userAuth = yield getCurrentUser();\r\n    if (!userAuth) return;\r\n    yield getSnapshotFromUserAuth(userAuth);\r\n  } catch (error) {\r\n    yield put(signInFailure(error));\r\n  }\r\n}\r\nexport function* signOut() {\r\n  try {\r\n\r\n    yield auth.signOut();\r\n    yield put(s)\r\n  } catch (error) {\r\n    yield put(signInFailure(error));\r\n  }\r\n}\r\nexport function* onGoogleSignInStart() {\r\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\r\n}\r\nexport function* onEmailSignInStart() {\r\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\r\n}\r\nexport function* oncheckUserSession() {\r\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\r\n}\r\nexport function* onSignOutStart() {\r\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\r\n}\r\nexport function* userSagas() {\r\n  yield all([\r\n    call(onGoogleSignInStart),\r\n    call(onEmailSignInStart),\r\n    call(oncheckUserSession),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}